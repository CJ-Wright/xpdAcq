#!/usr/bin/env python
##############################################################################
#
# xpdacq            by Billinge Group
#                   Simon J. L. Billinge sb2896@columbia.edu
#                   (c) 2016 trustees of Columbia University in the City of
#                        New York.
#                   All rights reserved
#
# File coded by:    Timothy Liu, Simon Billinge
#
# See AUTHORS.txt for a list of people who contributed.
# See LICENSE.txt for license information.
#
##############################################################################
#from dataportal import DataBroker as db
#from dataportal import get_events, get_table, get_images
#from metadatastore.commands import find_run_starts

from xpdacq.control import _get_obj
import tifffile as tif

# fileds used to generate tiff file name. Could be maintained later
_fname_field = ['sa_name']
#_scan_property = ['xp_isdark']

bt = _get_obj('bt')
def bt_uid():
    return bt.get(0).md['bt_uid']


def _feature_gen(header):
    ''' generate a human readable file name. 

    file name is generated by metadata information in header 
    '''
    uid = header.start.uid
    time_stub = _timestampstr(header.start.time)
    dummy_list = []

    if header['xp_isdark']:
        dummy_list.append('dark')
    if list(get_events(header))[0]['data']

    for key in _fname_field:
        try:
            # truncate length
            if len(header.start[key])>12:
                value = header.start[key][:12]
            else:
                value = header.start[key]
            # clear space
            dummy = [ ch for ch in list(value) if ch!=' ']
            dummy_list.append(''.join(dummy))  # feature list elements is at the first level
        except KeyError:
            pass

    inter_list = []
    for el in dummy_list:
        if isinstance(el, list): # handling experimenters
            join_list = "_".join(el)
            inter_list.append(join_list)
        else:
            inter_list.append(el)
    feature = "_".join(inter_list)
    exp_time = _timestampstr(headr.start.time)
    return '_'.join(feature, time)

def _timestampstr(timestamp):
    time = str(datetime.datetime.fromtimestamp(timestamp))
    date = time[:10]
    hour = time[11:16]
    m_hour = hour.replace(':','-')
    timestampstring = '_'.join([date,hour])
    #corrected_timestampstring = timestampstring.replace(':','-')
    return timestampstring







